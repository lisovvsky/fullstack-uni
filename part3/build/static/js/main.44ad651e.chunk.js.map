{"version":3,"sources":["services/persons.js","components/Person.js","components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","put","concat","delete","Person","_ref","person","destroyContact","react_default","a","createElement","name","number","onClick","Persons","persons","personElements","map","e","components_Person","key","PersonForm","addContact","handleNameChange","handleNumberChange","onSubmit","onChange","type","Filter","handleFilterChange","Notification","message","className","text","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","newFilter","setNewFilter","_useState9","_useState10","notificationMessage","setNotificationMessage","personsToShow","length","filter","search","useEffect","personService","initialPersons","components_Notification","components_Filter","RegExp","target","value","components_PersonForm","preventDefault","newPersonObject","msg","duplicatePerson","find","p","window","confirm","returnedPerson","setTimeout","catch","error","components_Persons","destroyedPerson","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.44ad651e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const response = axios.get(baseUrl)\n\n    return response.then(response => {\n        return response.data\n    })\n}\n\nconst create = (newObject) => {\n    const response = axios.post(baseUrl, newObject)\n\n    return response.then(response => {\n        return response.data\n    })\n}\n\nconst update = (id, newObject) => {\n    const response = axios.put(`${baseUrl}/${id}`, newObject)\n\n    return response.then(response => {\n        return response.data\n    })\n}\n\nconst destroy = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  destroy\n}","import React from 'react'\n\nconst Person = ({ person, destroyContact }) => {\n    return (\n        <li>\n            { `${ person.name } - ${ person.number }` }\n            <button name={ person.name } id={ person.id } onClick={ destroyContact }>delete</button>\n         </li>\n    )\n}\n\nexport default Person","import React from 'react'\n\nimport Person from './Person'\n\nconst Persons = ({ persons, destroyContact }) => {\n    const personElements = persons.map((e) => {\n        return (\n            <Person\n                key= { e.id }\n                person={ e }\n                destroyContact ={ destroyContact }\n            />\n        )\n    });\n\n    return (\n        <ul>\n            { personElements }\n        </ul>\n    )\n}\n\nexport default Persons","import React from 'react'\n\nconst PersonForm = ({ addContact, handleNameChange, handleNumberChange }) => {\n    return (\n        <form onSubmit={ addContact }>\n            <div>\n                name:\n                <input onChange={ handleNameChange }/>\n            </div>\n            <div>\n                number:\n                <input onChange={ handleNumberChange }/>\n            </div>\n\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({ handleFilterChange }) => {\n    return (\n        <div>\n            filter shown with:\n            <input onChange={ handleFilterChange }/>\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={ message.type === \"error\" ? \"error\" : \"notification\" }>\n            { message.text }\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\n\nimport './index.css'\n\nconst App = () => {\n    const [ persons, setPersons] = useState([])\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ newFilter, setNewFilter ] = useState('')\n    const [ notificationMessage, setNotificationMessage] = useState(null)\n\n    const personsToShow = newFilter.length === 0 ? persons\n                            : persons.filter(person => person.name.search(newFilter) >= 0)\n\n    useEffect(() => {\n        const dataHook = () => {\n            personService\n                .getAll()\n                .then(initialPersons => {\n                    setPersons(initialPersons)\n                })\n        }\n\n        dataHook()\n    }, []);\n\n    const addContact = (e) => {\n        e.preventDefault();\n\n        const newPersonObject = {\n            name: newName,\n            number: newNumber\n        }\n\n        const msg = `${ newName } is already added to phonebook, replace the old number with a new one?`\n        const duplicatePerson = persons.find(p => p.name === newName);\n\n        // using truthy to check if duplicate is found\n        if (duplicatePerson) {\n            if (window.confirm(msg) === true) {\n                personService\n                    .update(duplicatePerson.id, newPersonObject)\n                    .then(returnedPerson => {\n\n                        setNotificationMessage({\n                            \"text\": `Updated ${ returnedPerson.name }`,\n                            \"type\": \"notification\"\n                        })\n\n                        setTimeout(() => {\n                            setNotificationMessage(null)\n                        }, 5000)\n\n                        setPersons(persons.map(p => p.id !== duplicatePerson.id ? p : returnedPerson))\n                    })\n                    .catch(error => {\n                    setNotificationMessage({\n                        \"text\": error.response.data.error,\n                        \"type\": \"error\"\n                    })\n\n                    setTimeout(() => {\n                        setNotificationMessage(null)\n                    }, 5000)\n                })\n            }\n        } else {\n            personService\n                .create(newPersonObject)\n                .then(returnedPerson => {\n\n                    setNotificationMessage({\n                        \"text\": `Added ${ returnedPerson.name }`,\n                        \"type\": \"notification\"\n                    })\n\n                    setTimeout(() => {\n                        setNotificationMessage(null)\n                    }, 5000)\n\n                    setPersons(persons.concat(returnedPerson))\n                })\n                .catch(error => {\n                    setNotificationMessage({\n                        \"text\": error.response.data.error,\n                        \"type\": \"error\"\n                    })\n\n                    setTimeout(() => {\n                        setNotificationMessage(null)\n                    }, 5000)\n                })\n        }\n    }\n\n    const destroyContact = (e) => {\n        const id = e.target.id\n\n        const name = e.target.name\n        const msg = `Do you really want to delete ${ name }?`\n\n        if (window.confirm(msg) === true) {\n            personService\n                .destroy(id)\n                .then(destroyedPerson => {\n                    setPersons(persons.filter(p => p.id !== id))\n                })\n                .catch(error => {\n                    setNotificationMessage({\n                        \"text\": `The person, ${ name } was already removed from server`,\n                        \"type\": \"error\"\n                    })\n\n                    setTimeout(() => {\n                        setNotificationMessage(null)\n                    }, 5000)\n\n                    setPersons(persons.filter(p => p.id !== id))\n                })\n        }\n    }\n\n    const handleNameChange = (e) => setNewName(e.target.value)\n    const handleNumberChange = (e) => setNewNumber(e.target.value)\n    const handleFilterChange = (e) => setNewFilter(new RegExp(e.target.value, 'ig'))\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n\n            { notificationMessage !== null ? <Notification message={ notificationMessage } /> : null }\n\n            <Filter\n                handleFilterChange={ (e) => { handleFilterChange(e) } }\n            />\n\n            <h2>Add a new</h2>\n            <PersonForm\n                addContact={ (e) => addContact(e) }\n                handleNameChange={ (e) => handleNameChange(e) }\n                handleNumberChange= { (e) => handleNumberChange(e) }\n            />\n\n            <h2>Numbers</h2>\n            <Persons\n                persons={ personsToShow }\n                destroyContact={ (e) => destroyContact(e) }\n            />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}